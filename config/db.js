// config/db.js
const mysql = require('mysql2/promise');
require('dotenv').config(); // Carga variables de .env si est√°n en un archivo .env

// Obtiene la URL de la base de datos desde las variables de entorno
const dbUrl = process.env.DATABASE_URL;

// Verifica si la variable DATABASE_URL est√° definida
if (!dbUrl) {
  console.error('‚ùå Error Fatal: La variable de entorno DATABASE_URL no est√° definida.');
  console.error('Aseg√∫rate de configurar la variable DATABASE_URL en tu entorno de despliegue (Railway).');
  // Lanza un error para detener la aplicaci√≥n si la DB es esencial
  throw new Error('DATABASE_URL no configurada. La aplicaci√≥n no puede iniciar.');
  // Alternativamente, podr√≠as usar process.exit(1) para forzar la salida:
  // process.exit(1);
}

console.log('üîå Intentando conectar a la base de datos...'); // Mensaje para saber que se intenta conectar

let pool;
try {
  // Crea el pool de conexiones usando la URL
  pool = mysql.createPool(dbUrl);

  // Prueba la conexi√≥n para asegurar que la URL es v√°lida y la DB accesible
  pool.getConnection()
    .then(connection => {
      console.log('‚úÖ Conexi√≥n a la base de datos MySQL establecida correctamente.');
      connection.release(); // Libera la conexi√≥n de prueba inmediatamente
    })
    .catch(err => {
      // Este error es m√°s espec√≠fico, ocurre si la URL es inv√°lida o la conexi√≥n falla
      console.error(`‚ùå Error al establecer una conexi√≥n con la base de datos usando la URL proporcionada.`);
      console.error('Detalles del error:', err.message); // Muestra el mensaje espec√≠fico del error de conexi√≥n
      // Podr√≠as querer terminar el proceso aqu√≠ tambi√©n si la conexi√≥n inicial falla
      // process.exit(1);
    });

} catch (error) {
    // Este catch manejar√≠a errores si `mysql.createPool(dbUrl)` fallara inmediatamente
    // (aunque es m√°s com√∫n que falle dentro del .getConnection().catch)
    console.error('‚ùå Error Cr√≠tico al intentar crear el pool de conexiones MySQL:', error);
    throw error; // Relanza el error para detener la aplicaci√≥n
    // o process.exit(1);
}

// Exporta el pool para usarlo en otros archivos (controllers, etc.)
module.exports = pool;